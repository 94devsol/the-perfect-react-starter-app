{"version":3,"sources":["context/AuthContext.js","context/SidebarContext.js","components/ThemedSuspense.js","App.js","components/AccessibleNavigationAnnouncer.js","privateRoute.js","history.js","serviceWorker.js","index.js"],"names":["authContext","createContext","SidebarContext","React","SidebarProvider","children","useState","isSidebarOpen","setIsSidebarOpen","toggleSidebar","closeSidebar","value","useMemo","Provider","ThemedSuspense","className","global","appVersion","packageJson","version","Layout","lazy","Login","CreateAccount","ForgotPassword","App","useContext","auth","useEffect","fetch","then","response","json","meta","latestVersion","versionA","versionB","versionsA","split","versionsB","length","a","Number","shift","b","isNaN","semverGreaterThan","console","log","caches","keys","names","name","delete","window","location","reload","path","component","exact","from","to","AccessibleNavigationAnnouncer","message","setMessage","useLocation","pathname","slice","setTimeout","role","aria-live","aria-atomic","PrivateRoute","Component","rest","loading","render","routeProps","data","createBrowserHistory","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","fallback","usePreferences","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2b20bd3e.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { HASURA_ENDPOINT_DEV } from \"../config\";\nimport {\n  createClient,\n  Provider,\n  defaultExchanges,\n  subscriptionExchange,\n} from \"urql\";\nimport { SubscriptionClient } from \"subscriptions-transport-ws\";\n\nexport const authContext = createContext({});\n\nconst AuthProvider = ({ children }) => {\n  const [auth, setAuth] = useState({ loading: true, data: null });\n\n  const subscriptionClient = new SubscriptionClient(\n    `wss://${HASURA_ENDPOINT_DEV}`,\n    {\n      reconnect: true,\n      connectionParams: {\n        headers: {\n          Authorization: `Bearer ${auth?.data?.accessToken}`,\n        },\n      },\n    }\n  );\n\n  let headers = {};\n\n  if (auth?.data?.accessToken) {\n    headers = {\n      Authorization: `Bearer ${auth?.data?.accessToken}`,\n    };\n  }\n\n  const client = createClient({\n    url: `https://${HASURA_ENDPOINT_DEV}`,\n    exchanges: [\n      ...defaultExchanges,\n      subscriptionExchange({\n        forwardSubscription(operation) {\n          return subscriptionClient.request(operation);\n        },\n      }),\n    ],\n    requestPolicy: \"network-only\",\n    // fetch: fetch,\n    fetchOptions: () => {\n      if (!auth) {\n        return true;\n      }\n      return {\n        headers,\n      };\n    },\n  });\n\n  const setAuthData = (data) => {\n    setAuth({ data: data });\n  };\n\n  useEffect(() => {\n    try {\n      setAuth({\n        loading: false,\n        data: JSON.parse(localStorage.getItem(\"authData\")),\n      });\n    } catch (e) {\n      console.log(\"auth failed\");\n    }\n  }, []);\n  //2. if object with key 'authData' exists in localStorage, we are putting its value in auth.data and we set loading to false.\n  //This function will be executed every time component is mounted (every time the user refresh the page);\n\n  useEffect(() => {\n    localStorage.setItem(\"authData\", JSON.stringify(auth.data));\n  }, [auth.data]);\n  // 1. when **auth.data** changes we are setting **auth.data** in localStorage with the key 'authData'.\n\n  return (\n    <authContext.Provider value={{ auth, setAuthData }}>\n      <Provider value={client}>{children}</Provider>\n    </authContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n","import React, { useState, useMemo } from 'react'\n\n// create context\nexport const SidebarContext = React.createContext()\n\nexport const SidebarProvider = ({ children }) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n\n  function toggleSidebar() {\n    setIsSidebarOpen(!isSidebarOpen)\n  }\n\n  function closeSidebar() {\n    setIsSidebarOpen(false)\n  }\n\n  const value = useMemo(\n    () => ({\n      isSidebarOpen,\n      toggleSidebar,\n      closeSidebar,\n    }),\n    [isSidebarOpen]\n  )\n\n  return <SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>\n}\n","import React from 'react'\n\nfunction ThemedSuspense() {\n  return (\n    <div className=\"w-full h-screen p-6 text-lg font-medium text-gray-600 dark:text-gray-400 dark:bg-gray-900\">\n      Loading...\n    </div>\n  )\n}\n\nexport default ThemedSuspense\n","import React, { lazy, useEffect, useContext } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport AccessibleNavigationAnnouncer from \"./components/AccessibleNavigationAnnouncer\";\nimport packageJson from \"../package.json\";\nimport { authContext } from \"./context/AuthContext\";\nimport PrivateRoute from \"./privateRoute\";\nimport history from \"./history\";\n\nglobal.appVersion = packageJson.version;\nconst Layout = lazy(() => import(\"./containers/Layout\"));\nconst Login = lazy(() => import(\"./pages/Login\"));\nconst CreateAccount = lazy(() => import(\"./pages/CreateAccount\"));\nconst ForgotPassword = lazy(() => import(\"./pages/ForgotPassword\"));\n\nconst semverGreaterThan = (versionA, versionB) => {\n  const versionsA = versionA.split(/\\./g);\n\n  const versionsB = versionB.split(/\\./g);\n  while (versionsA.length || versionsB.length) {\n    const a = Number(versionsA.shift());\n\n    const b = Number(versionsB.shift());\n    // eslint-disable-next-line no-continue\n    if (a === b) continue;\n    // eslint-disable-next-line no-restricted-globals\n    return a > b || isNaN(b);\n  }\n  return false;\n};\n\nfunction App() {\n  const { auth } = useContext(authContext);\n\n  useEffect(() => {\n    fetch(\"/meta.json\")\n      .then((response) => response.json())\n      .then((meta) => {\n        const latestVersion = meta.version;\n        const currentVersion = global.appVersion;\n\n        const shouldForceRefresh = semverGreaterThan(\n          latestVersion,\n          currentVersion\n        );\n        if (shouldForceRefresh) {\n          console.log(\n            `We have a new version - ${latestVersion}. Should force refresh`\n          );\n\n          if (caches) {\n            // Service worker cache should be cleared with caches.delete()\n            console.log(\"Invalidating cache..!\");\n            caches.keys().then(function (names) {\n              for (let name of names) caches.delete(name);\n            });\n          } // delete browser cache and hard reload\n          // window.location.reload(true);\n          window.location.reload();\n          // setLoading(false);\n          // setLatestVersion(false);\n        } else {\n          console.log(\n            `You already have the latest version - ${latestVersion}. No cache refresh needed.`\n          );\n          // setLoading(false);\n          // setLatestVersion(true);\n        }\n      }, []);\n  });\n  return (\n    <>\n      <Router>\n        <AccessibleNavigationAnnouncer />\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/create-account\" component={CreateAccount} />\n          <Route path=\"/forgot-password\" component={ForgotPassword} />\n\n          {/* If you have an index page, you can remothis Redirect */}\n          <Redirect exact from=\"/\" to=\"/login\" />\n          <PrivateRoute path=\"/\" component={Layout} />\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nfunction AccessibleNavigationAnnouncer() {\n  const [message, setMessage] = useState('')\n  const location = useLocation()\n\n  useEffect(() => {\n    // ignore the /\n    if (location.pathname.slice(1)) {\n      // make sure navigation has occurred and screen reader is ready\n      setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500)\n    } else {\n      setMessage('')\n    }\n  }, [location])\n\n  return (\n    <span className=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\n      {message}\n    </span>\n  )\n}\n\nexport default AccessibleNavigationAnnouncer\n","import React, { useContext } from \"react\";\nimport { Route, Redirect, useLocation } from \"react-router-dom\";\nimport { authContext } from \"./context/AuthContext\";\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const { auth } = useContext(authContext);\n  const { pathname } = useLocation();\n  console.log(\n    \"🚀 ~ file: privateRoute.js ~ line 8 ~ PrivateRoute ~ location\",\n    pathname\n  );\n  const { loading } = auth;\n\n  if (loading) {\n    return (\n      <Route\n        {...rest}\n        render={() => {\n          return <p>Loading...</p>;\n        }}\n      />\n    );\n  }\n\n  return (\n    <Route\n      {...rest}\n      render={(routeProps) => {\n        return auth.data ? (\n          <Component {...routeProps} />\n        ) : (\n          <Redirect to={`/login?${pathname}`} />\n        );\n      }}\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport './assets/css/tailwind.output.css'\nimport App from './App'\nimport { SidebarProvider } from './context/SidebarContext'\nimport ThemedSuspense from './components/ThemedSuspense'\nimport { Windmill } from '@windmill/react-ui'\nimport * as serviceWorker from './serviceWorker'\n\n// if (process.env.NODE_ENV !== 'production') {\n//   const axe = require('react-axe')\n//   axe(React, ReactDOM, 1000)\n// }\n\nReactDOM.render(\n  <SidebarProvider>\n    <Suspense fallback={<ThemedSuspense />}>\n      <Windmill usePreferences>\n        <App />\n      </Windmill>\n    </Suspense>\n  </SidebarProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}